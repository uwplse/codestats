PARSER_BEGIN(QueryParser)

package edu.washington.cse.codestats;

import java.io.*;
import java.util.*;
import edu.washington.cse.codestats.*;

public class QueryParser {
    static List<Query> parse(InputStream in) throws ParseException, TokenMgrError {
         return new QueryParser(in).program();
    }
}

PARSER_END(QueryParser)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN :
{
  < EXISTS : "exists">
| < COUNT : "count">
| < HYBRID: "hybrid" >
| < STMT : "statement">
| < EXPR : "expression">
| < WITHIN : "within">
| < WHERE : "where">
| < AND : "and" >
| < OR : "or" >
| < IS : "is" >
| < IN : "in" >
| < NOT : "not" >
| < ANY : "[?]" >
| < ALL : "[*]" >
| < INDEX : "[" (["0"-"9"])+ "]" >
| < IDENT : (["A"-"Z", "a"-"z", "_"])+ >
| < STRING : "'" (~["'"])* "'" >
| < NUMBER : (["0"-"9"])+ >
| < OPERATOR : ("!=" | "==" | "<" | "<=" | ">=" | ">") >
}

List<Query> program() :
{
    List<Query> blocks = new ArrayList();
    Query block;
}
{
    ((block = block()) { blocks.add(block); })* <EOF> { return blocks; }
}

Query block() :
{
    Token name = null;
    Token deriving = null;
    Metric metric = null;
    QueryTarget target = null;
    PredicateMirror pred = null;
}
{
    (name = <IDENT>) ":" (<EXISTS> { metric = Metric.EXISTS; } | <COUNT> { metric = Metric.SUM; } | <HYBRID> { metric = Metric.HYBRID; })
    (<EXPR> { target = QueryTarget.EXPRESSION; } | <STMT> { target = QueryTarget.STATEMENT; })
    <IDENT> [<WITHIN> (deriving = <IDENT>)] <WHERE> "{" (pred = predicate()) "}"
    { return new Query(name.image, deriving == null ? null : deriving.image, metric, target, pred); }
}

PredicateMirror predicate() :
{
    PredicateMirror pred;
}
{
    (pred = conjunction())
    { return pred; }
}

PredicateMirror conjunction() :
{
    List<PredicateMirror> children = new ArrayList<PredicateMirror>();
    PredicateMirror child;
}
{
    (child = disjunction()) { children.add(child); }
    (<AND> (child = disjunction()) { children.add(child); } )*
    { return new PredicateMirror(PredicateMirror.PredicateType.AND, children); }
}

PredicateMirror disjunction() :
{
    List<PredicateMirror> children = new ArrayList<PredicateMirror>();
    PredicateMirror child;
}
{
    (child = atom_or_conjunction()) { children.add(child); }
    (<OR> (child = atom_or_conjunction()) { children.add(child); } )*
    { return new PredicateMirror(PredicateMirror.PredicateType.OR, children); }
}

PredicateMirror atom_or_conjunction() :
{
    PredicateMirror pred;
}
{
    ("(" (pred = conjunction()) ")" | (pred = atom()))
    { return pred; }
}

List<String> detList() :
{
  List<String> attribute = new ArrayList<String>();
  Token component = null;
  String indexString = null;
}
{
  <IDENT> ( "." (component = <IDENT>) { attribute.add(component.image); } | (indexString = index()) { attribute.add(indexString); } )*
  {
    return attribute;
  }
}

List<String> valueList() :
{
  List<String> vList = new ArrayList<String>();
  Token target_const = null;
}
{
  "(" (
         ((target_const = <STRING>) { vList.add(target_const.image); } ("," (target_const = <STRING>) { vList.add(target_const.image); })*)
       | ((target_const = <NUMBER>) { vList.add(target_const.image); } ("," (target_const = <NUMBER>) { vList.add(target_const.image); })*)
      ) ")"
  {
     return vList;
  }
    
}

String index() :
{
   Token component = null;
}
{
   (component = <INDEX>) { return component.image.substring(1, component.image.length() - 1); }
}

PredicateMirror atom() :
{
    List<String> attribute = new ArrayList<String>();
    Token component = null;
    Token target = null;
    Token operator = null;
    boolean is = true;
    boolean in = true;
    String indexString = null;
    List<String> targetList = null;
}
{
    <IDENT> ( "." (component = <IDENT>) { attribute.add(component.image); } | <ANY> { attribute.add("?"); } | <ALL> { attribute.add("*"); } | (indexString = index()) { attribute.add(indexString); } )*
    (
      ((operator = <OPERATOR>) (target = <STRING> | target = <NUMBER> | targetList = detList()))
      | (<IS> { is = true; } [ <NOT> { is = false; } ]) (target = <IDENT>)
      | ((operator = <IN>) (targetList = valueList())) 
    )
    {
        PredicateAtom atom;
        if (operator != null) {
            if(targetList != null) {
              atom = new PredicateAtom(attribute, operator.image, targetList);
            } else {
              atom = new PredicateAtom(attribute, operator.image, target.image);
            }
        } else {
            atom = new PredicateAtom(attribute, is, target.image);
        }
        return new PredicateMirror(atom);
    }
}